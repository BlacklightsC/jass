else if (/^\s*interface/.test(lineText)) {
  const inter = Interface.parse(lineText);
  if (inter.name) {
    const nameIndex = lineText.indexOf(inter.name);
    inter.nameRange = new vscode.Range(i, nameIndex, i, nameIndex + inter.name.length);
  }
  inter.description = findDescription();
  inter.start = new vscode.Position(i, getStartIndex());
  jass.interfaces.push(inter);
  inInterface = true;
} else if (/^\s*endinterface/.test(lineText)) {
  const inter = jass.interfaces[jass.interfaces.length - 1];
  if (inter) {
    if (lineText.includes("endinterface")) {
      inter.end = new vscode.Position(i, lineText.length - lineText.trimLeft().length);
    }
  }
  inInterface = false;
} else if (inInterface) {  // 进入interface块时，只识别成员和
  /*
  解析member和method
  */
  if (/\bmethod\b/.test(lineText)) {
    const method = Method.parse(lineText);
    if (method) {
      if (method.name) {
        const nameIndex = lineText.indexOf(method.name);
        if (nameIndex > -1) method.nameRange = new vscode.Range(i, nameIndex, i, nameIndex + method.name.length);
      }
      method.description = findDescription();
      method.start = new vscode.Position(i, lineText.length - lineText.trimLeft().length);
      const inter = jass.interfaces[jass.interfaces.length - 1];
      if (inter) {
        inter.methods.push(method);
      }
    }
  } else {
    const member = Member.parse(lineText);
    if (member) {
      if (member.name) {
        const nameIndex = lineText.indexOf(member.name);
        if (nameIndex > -1) member.nameRange = new vscode.Range(i, nameIndex, i, nameIndex + member.name.length);
      }
      member.description = findDescription();
      member.range = new vscode.Range(i, getStartIndex(), i, lineText.length);
      const inter = jass.interfaces[jass.interfaces.length - 1];
      if (inter) {
        inter.members.push(member);
      }
    }
  }
}